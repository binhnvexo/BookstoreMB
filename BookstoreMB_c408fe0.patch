commit c408fe0bf6e502d8f0dc7583394707f26c3bf898
Author: BinhNV <binhnv@exoplatform.com>
Date:   Fri Jul 27 18:13:42 2012 +0700

    commit code get connect to webservice

diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 6abf336..b2f2232 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -6,6 +6,7 @@
     <uses-sdk
         android:minSdkVersion="8"
         android:targetSdkVersion="15" />
+    <uses-permission android:name="android.permission.INTERNET"/>
 
     <application
         android:icon="@drawable/ic_launcher"
diff --git a/bin/AndroidManifest.xml b/bin/AndroidManifest.xml
index 6abf336..b2f2232 100644
--- a/bin/AndroidManifest.xml
+++ b/bin/AndroidManifest.xml
@@ -6,6 +6,7 @@
     <uses-sdk
         android:minSdkVersion="8"
         android:targetSdkVersion="15" />
+    <uses-permission android:name="android.permission.INTERNET"/>
 
     <application
         android:icon="@drawable/ic_launcher"
diff --git a/bin/BookstoreMB.apk b/bin/BookstoreMB.apk
index f503290..8d7df30 100644
Binary files a/bin/BookstoreMB.apk and b/bin/BookstoreMB.apk differ
diff --git a/bin/classes.dex b/bin/classes.dex
index 66e2175..ee8eb9a 100644
Binary files a/bin/classes.dex and b/bin/classes.dex differ
diff --git a/bin/classes/com/example/bookstoremb/MainActivity.class b/bin/classes/com/example/bookstoremb/MainActivity.class
index 95c6cec..9e95f99 100644
Binary files a/bin/classes/com/example/bookstoremb/MainActivity.class and b/bin/classes/com/example/bookstoremb/MainActivity.class differ
diff --git a/bin/classes/com/example/bookstoremb/utils/Constants.class b/bin/classes/com/example/bookstoremb/utils/Constants.class
new file mode 100644
index 0000000..a610a33
Binary files /dev/null and b/bin/classes/com/example/bookstoremb/utils/Constants.class differ
diff --git a/bin/classes/com/example/bookstoremb/utils/RestClient$RequestMethod.class b/bin/classes/com/example/bookstoremb/utils/RestClient$RequestMethod.class
new file mode 100644
index 0000000..8941c63
Binary files /dev/null and b/bin/classes/com/example/bookstoremb/utils/RestClient$RequestMethod.class differ
diff --git a/bin/classes/com/example/bookstoremb/utils/RestClient.class b/bin/classes/com/example/bookstoremb/utils/RestClient.class
new file mode 100644
index 0000000..ebb58d2
Binary files /dev/null and b/bin/classes/com/example/bookstoremb/utils/RestClient.class differ
diff --git a/bin/resources.ap_ b/bin/resources.ap_
index 61d42f0..387f210 100644
Binary files a/bin/resources.ap_ and b/bin/resources.ap_ differ
diff --git a/res/layout/row.xml b/res/layout/row.xml
index e50bde3..f0d0ed7 100644
--- a/res/layout/row.xml
+++ b/res/layout/row.xml
@@ -1,33 +1,29 @@
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:orientation="horizontal" >
-
-    <ImageView
-        android:id="@+id/icon"
-        android:layout_width="22px"
-        android:layout_height="wrap_content"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent" >
+ 
+    <ImageView android:id="@+id/icon"
+        android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
         android:paddingLeft="2px"
         android:paddingRight="2px"
         android:paddingTop="8px"
-        android:src="@drawable/airport" >
-    </ImageView>
-
-    <TextView
-        android:id="@+id/label"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:textSize="20sp" 
-        android:layout_toRightOf="@id/icon"/>
-    
-    <ImageView
-        android:id="@+id/arrow"
-        android:layout_width="22px"
-        android:layout_height="wrap_content"
-        android:paddingTop="10px"
-        android:src="@drawable/arrow"
-        android:layout_toRightOf="@id/label"
-        android:layout_alignParentRight="true">
-    </ImageView>
-
+		android:src="@drawable/airport">
+	</ImageView>
+	
+	<TextView android:id="@+id/label"
+	    android:layout_width="wrap_content"
+	    android:layout_height="fill_parent"
+	    android:layout_toRightOf="@id/icon"
+		android:textSize="20sp" />
+	    
+	<ImageView android:id="@+id/arrow"
+	    android:layout_width="wrap_content"
+	    android:layout_height="fill_parent"
+	    android:paddingRight="2px"
+	    android:paddingTop="10px"
+		android:src="@drawable/arrow"
+		android:layout_alignParentRight="true">
+	</ImageView>
+	    
 </RelativeLayout>
\ No newline at end of file
diff --git a/src/com/example/bookstoremb/MainActivity.java b/src/com/example/bookstoremb/MainActivity.java
index 5139572..767a65e 100644
--- a/src/com/example/bookstoremb/MainActivity.java
+++ b/src/com/example/bookstoremb/MainActivity.java
@@ -1,7 +1,22 @@
 package com.example.bookstoremb;
 
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.ClientProtocolException;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.ResponseHandler;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.impl.client.BasicResponseHandler;
+import org.apache.http.impl.client.DefaultHttpClient;
+
 import android.app.ListActivity;
 import android.os.Bundle;
+import android.util.Base64;
 import android.view.Menu;
 import android.view.View;
 import android.widget.ArrayAdapter;
@@ -12,11 +27,35 @@ public class MainActivity extends ListActivity {
 
     TextView selection;
     String[] items = {"Alice in wonderland", "Jouney to the West", "Shelock Holme", "The Mask"};
-  
+    String URL = "http://192.168.1.130:8080/rest/private/bookstore/searchAllBook";
+    String result;
+    String username = "root";
+    String password = "gtn";
+    
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_main);
+        HttpClient client = new DefaultHttpClient();
+        HttpGet request = new HttpGet(URL);
+        request.setHeader("Authorization",
+                      "Basic "
+                          + Base64.encodeToString((username + ":" + password).getBytes(),
+                                                  Base64.NO_WRAP));
+        ResponseHandler<String> handler = new BasicResponseHandler();
+        try {
+          HttpResponse response = client.execute(request);
+          HttpEntity entity = response.getEntity();
+          if (entity != null) {
+            InputStream is = entity.getContent();
+            String responseStr = convertStreamToString(is);
+          }
+        } catch (ClientProtocolException cpe) {
+          cpe.printStackTrace();
+        } catch (IOException e) {
+          e.printStackTrace();
+        }
+        client.getConnectionManager().shutdown();
         setListAdapter(new ArrayAdapter<String>(this, R.layout.row, R.id.label, items));
     }
 
@@ -34,4 +73,26 @@ public class MainActivity extends ListActivity {
       super.onListItemClick(l, v, position, id);
     }
     
+    private String convertStreamToString(InputStream is) {
+
+      BufferedReader reader = new BufferedReader(new InputStreamReader(is));
+      StringBuilder sb = new StringBuilder();
+
+      String line = null;
+      try {
+          while ((line = reader.readLine()) != null) {
+              sb.append(line + "\n");
+          }
+      } catch (IOException e) {
+          e.printStackTrace();
+      } finally {
+          try {
+              is.close();
+          } catch (IOException e) {
+              e.printStackTrace();
+          }
+      }
+      return sb.toString();
+  }
+    
 }
diff --git a/src/com/example/bookstoremb/utils/Constants.java b/src/com/example/bookstoremb/utils/Constants.java
new file mode 100644
index 0000000..ec90a0a
--- /dev/null
+++ b/src/com/example/bookstoremb/utils/Constants.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.example.bookstoremb.utils;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 27, 2012  
+ */
+public class Constants {
+  
+}
diff --git a/src/com/example/bookstoremb/utils/RestClient.java b/src/com/example/bookstoremb/utils/RestClient.java
new file mode 100644
index 0000000..bddc21f
--- /dev/null
+++ b/src/com/example/bookstoremb/utils/RestClient.java
@@ -0,0 +1,177 @@
+/*
+ * Copyright (C) 2003-2012 eXo Platform SAS.
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Affero General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Affero General Public License for more details.
+ *
+ * You should have received a copy of the GNU Affero General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.example.bookstoremb.utils;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.HttpResponse;
+import org.apache.http.NameValuePair;
+import org.apache.http.client.ClientProtocolException;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.entity.UrlEncodedFormEntity;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.message.BasicNameValuePair;
+import org.apache.http.protocol.HTTP;
+
+/**
+ * Created by The eXo Platform SAS
+ * Author : BinhNV
+ *          binhnv@exoplatform.com
+ * Jul 27, 2012  
+ */
+public class RestClient {
+  
+  public static enum RequestMethod {
+    GET, POST, PUT, DELETE;
+  }
+  
+  private List<NameValuePair> params;
+  private List<NameValuePair> headers;
+  private String url;
+  private int responseCode;
+  private String errorMessage;
+  private String responseStr;
+  
+  /**
+   * 
+   */
+  public RestClient(String url) {
+    this.url = url;
+    params = new ArrayList<NameValuePair>();
+    headers = new ArrayList<NameValuePair>();
+  }
+
+  public void execute(RequestMethod method) throws Exception {
+    switch (method) {
+      case GET:
+        {
+          String combinedParams = "";
+          if (!params.isEmpty()) {
+            combinedParams += "?";
+            for (NameValuePair p : params) {
+              String paramString = p.getName() + "=" + URLEncoder.encode(p.getValue(), "UTF-8");
+              if (combinedParams.length() > 1) {
+                combinedParams += "&" + paramString;
+              } else {
+                combinedParams += paramString;
+              }
+            }
+          }
+          HttpGet request = new HttpGet(url + combinedParams);
+          for (NameValuePair h : headers) {
+            request.addHeader(h.getName(), h.getValue());
+          }
+          executeRequest(request, url);
+          break;
+        }
+      case POST:
+        {
+          HttpPost request = new HttpPost(url);
+          for (NameValuePair h : headers) {
+            request.addHeader(h.getName(), h.getValue());
+          }
+          if (!params.isEmpty()) {
+            request.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
+          }
+          executeRequest(request, url);
+          break;
+        }
+    }
+  }
+  
+  public void addParam(String name, String value) {
+    params.add(new BasicNameValuePair(name, value));
+  }
+  
+  public void addHeader(String name, String value) {
+    headers.add(new BasicNameValuePair(name, value));
+  }
+  
+  /**
+   * @return the responseCode
+   */
+  public int getResponseCode() {
+    return responseCode;
+  }
+
+  /**
+   * @return the errorMessage
+   */
+  public String getErrorMessage() {
+    return errorMessage;
+  }
+
+  /**
+   * @return the response
+   */
+  public String getResponseStr() {
+    return responseStr;
+  }
+  
+  private void executeRequest(HttpUriRequest request, String url) {
+    HttpClient client = new DefaultHttpClient();
+    HttpResponse respone;
+    try {
+      respone = client.execute(request);
+      responseCode = respone.getStatusLine().getStatusCode();
+      errorMessage = respone.getStatusLine().getReasonPhrase();
+      HttpEntity entity = respone.getEntity();
+      if (entity != null) {
+        InputStream is = entity.getContent();
+        responseStr = convertStreamToString(is);
+        is.close();
+      }
+    } catch (ClientProtocolException cpe) {
+      client.getConnectionManager().shutdown();
+      cpe.printStackTrace();
+    } catch (IOException ioe) {
+      client.getConnectionManager().shutdown();
+      ioe.printStackTrace();
+    }
+  }
+  
+  private String convertStreamToString(InputStream is) {
+    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
+    StringBuilder sb = new StringBuilder();
+    String line = "";
+    try {
+      while ((line = reader.readLine()) != null) {
+        sb.append(line + "\n");
+      }
+    } catch (IOException ioe) {
+      ioe.printStackTrace();
+    } finally {
+      try {
+        is.close();
+      } catch (IOException e) {
+        e.printStackTrace();
+      }
+    }
+    return sb.toString();
+  }
+
+}
